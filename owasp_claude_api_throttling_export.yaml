AWSTemplateFormatVersion: '2010-09-09'
Description: OWASP Assistant - Claude Integration via Amazon Bedrock (Inline Lambda)

Resources:

  ClaudeLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: ClaudeLambdaExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: AllowClaudeAndLogs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - bedrock:InvokeModel
                Resource: "*"
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"

  ClaudeLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: ClaudeAssistantFunction
      Runtime: python3.10
      Handler: lambda_function.lambda_handler
      Role: !GetAtt ClaudeLambdaRole.Arn
      Timeout: 30
      Code:
        ZipFile: |
          import json
          import boto3

          bedrock = boto3.client("bedrock-runtime", region_name="us-east-1")

          def lambda_handler(event, context):
              try:
                  body = json.loads(event.get("body", "{}"))
                  prompt = body.get("prompt", "")

                  payload = {
                      "prompt": f"\n\nHuman: {prompt}\n\nAssistant:",
                      "max_tokens_to_sample": 300,
                      "temperature": 0.7,
                      "stop_sequences": ["\n\nHuman:"]
                  }

                  response = bedrock.invoke_model(
                      modelId="anthropic.claude-v2",
                      contentType="application/json",
                      accept="application/json",
                      body=json.dumps(payload)
                  )

                  result = json.loads(response["body"].read())

                  return {
                      "statusCode": 200,
                      "headers": {
                          "Content-Type": "application/json",
                          "Access-Control-Allow-Origin": "*"
                      },
                      "body": json.dumps({"response": result["completion"]})
                  }
              except Exception as e:
                  return {
                      "statusCode": 500,
                      "body": json.dumps({"error": str(e)})
                  }

  ClaudeAPI:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: ClaudeAPI

  ClaudeResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ClaudeAPI
      ParentId: !GetAtt ClaudeAPI.RootResourceId
      PathPart: ask

  ClaudeMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ClaudeAPI
      ResourceId: !Ref ClaudeResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ClaudeLambdaFunction.Arn}/invocations

  ClaudeInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ClaudeLambdaFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ClaudeAPI}/*/*/*

Outputs:
  ClaudeInvokeURL:
    Description: "Public API URL for Claude assistant"
    Value: !Sub "https://${ClaudeAPI}.execute-api.${AWS::Region}.amazonaws.com/prod/ask"
